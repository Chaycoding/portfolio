import{S as n,_ as c,i as e,e as d}from"./index-9596a354.js";const a=0;class l{constructor(r){this.container=r,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[],r.getAbsorber=s=>s===void 0||n(s)?this.array[s??a]:this.array.find(t=>t.name===s),r.addAbsorber=async(s,t)=>this.addAbsorber(s,t)}async addAbsorber(r,s){const{AbsorberInstance:t}=await c(()=>import("./AbsorberInstance-5e16c0a9.js"),["assets/AbsorberInstance-5e16c0a9.js","assets/AbsorbersPlugin-d83f35f5.js","assets/index-9596a354.js","assets/index-4ac19059.css","assets/ValueWithRandom-b9e21c0d.js","assets/AnimationOptions-d5d33024.js","assets/OptionsColor-6872fa30.js"]),i=new t(this,this.container,r,s);return this.array.push(i),i}draw(r){for(const s of this.array)s.draw(r)}handleClickMode(r){const s=this.absorbers,t=this.interactivityAbsorbers;if(r==="absorber"){const i=e(t),o=i??e(s),b=this.container.interactivity.mouse.clickPosition;this.addAbsorber(o,b)}}async init(){this.absorbers=this.container.actualOptions.absorbers,this.interactivityAbsorbers=this.container.actualOptions.interactivity.modes.absorbers;const r=d(this.absorbers,async s=>{await this.addAbsorber(s)});r instanceof Array?await Promise.all(r):await r}particleUpdate(r){for(const s of this.array)if(s.attract(r),r.destroyed)break}removeAbsorber(r){const s=this.array.indexOf(r),t=1;s>=a&&this.array.splice(s,t)}resize(){for(const r of this.array)r.resize()}stop(){this.array=[]}}export{l as Absorbers};
